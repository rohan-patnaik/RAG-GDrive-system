# backend/rag_system/core/embeddings.py
import logging
from typing import List, Optional, Union, cast

from sentence_transformers import SentenceTransformer
from rag_system.utils.exceptions import EmbeddingError
from rag_system.config.settings import AppSettings, get_settings

logger = logging.getLogger(__name__)


class EmbeddingService:
    """
    Service for generating text embeddings using Sentence Transformers.
    """

    def __init__(self, settings: Optional[AppSettings] = None):
        """
        Initializes the EmbeddingService.

        Args:
            settings: Application settings. If None, loads default settings.
        """
        if settings is None:
            settings = get_settings()

        self.model_name: str = settings.EMBEDDING_MODEL_NAME
        self.device: Optional[str] = settings.EMBEDDING_MODEL_DEVICE
        self.model: Optional[SentenceTransformer] = None
        self._load_model()

    def _load_model(self) -> None:
        """Loads the Sentence Transformer model."""
        try:
            logger.info(
                f"Loading embedding model: {self.model_name} on device: {self.device or 'auto'}"
            )
            self.model = SentenceTransformer(self.model_name, device=self.device)
            logger.info(f"Embedding model '{self.model_name}' loaded successfully.")
        except Exception as e:
            logger.error(
                f"Failed to load embedding model '{self.model_name}': {e}",
                exc_info=True,
            )
            # Propagate a custom exception or handle as appropriate
            raise EmbeddingError(
                f"Could not load embedding model '{self.model_name}'."
            ) from e

    def get_model(self) -> SentenceTransformer:
        """
        Returns the loaded Sentence Transformer model.
        Raises EmbeddingError if the model is not loaded.
        """
        if self.model is None:
            logger.error("Embedding model is not loaded.")
            raise EmbeddingError("Embedding model is not loaded. Call _load_model() or ensure initialization succeeded.")
        return self.model

    def encode_texts(self, texts: List[str]) -> List[List[float]]:
        """
        Generates embeddings for a list of texts.

        Args:
            texts: A list of strings to embed.

        Returns:
            A list of embeddings (each embedding is a list of floats).

        Raises:
            EmbeddingError: If encoding fails.
        """
        if not texts:
            return []
        try:
            model = self.get_model()
            logger.debug(f"Encoding {len(texts)} texts...")
            # The type hint for sentence-transformers encode method might be ndarray,
            # but it often returns a list of lists of floats or can be converted.
            embeddings_np = model.encode(texts, convert_to_tensor=False) # Get numpy arrays
            embeddings: List[List[float]] = [arr.tolist() for arr in embeddings_np]
            logger.debug(f"Successfully encoded {len(texts)} texts.")
            return embeddings
        except Exception as e:
            logger.error(f"Failed to encode texts: {e}", exc_info=True)
            raise EmbeddingError("Failed to generate embeddings for texts.") from e

    def encode_query(self, query: str) -> List[float]:
        """
        Generates an embedding for a single query string.

        Args:
            query: The query string to embed.

        Returns:
            The embedding for the query (a list of floats).

        Raises:
            EmbeddingError: If encoding fails.
        """
        if not query:
            # Return an empty list or raise error, depending on desired behavior
            logger.warning("Attempted to encode an empty query string.")
            return [] # Or raise ValueError("Query cannot be empty")

        try:
            model = self.get_model()
            logger.debug(f"Encoding query: '{query[:50]}...'")
            # Ensure the output is correctly typed
            embedding_np = model.encode(query, convert_to_tensor=False)
            embedding: List[float] = cast(List[float], embedding_np.tolist())
            logger.debug("Successfully encoded query.")
            return embedding
        except Exception as e:
            logger.error(f"Failed to encode query: {e}", exc_info=True)
            raise EmbeddingError("Failed to generate embedding for the query.") from e

    def get_embedding_dimension(self) -> Optional[int]:
        """
        Returns the dimension of the embeddings generated by the model.
        """
        try:
            model = self.get_model()
            return model.get_sentence_embedding_dimension()
        except Exception as e:
            logger.error(f"Could not get embedding dimension: {e}", exc_info=True)
            return None


# Example Usage:
if __name__ == "__main__":
    from rag_system.config.logging_config import setup_logging
    setup_logging("DEBUG")

    try:
        # Uses settings from .env or defaults
        embedding_service = EmbeddingService()

        dimension = embedding_service.get_embedding_dimension()
        logger.info(f"Embedding dimension: {dimension}")


        sample_texts = [
            "Hello world, this is a test.",
            "Sentence Transformers are great for embeddings.",
            "RAG systems combine retrieval and generation.",
        ]
        text_embeddings = embedding_service.encode_texts(sample_texts)
        for i, emb in enumerate(text_embeddings):
            logger.info(f"Embedding for text {i} (first 5 dims): {emb[:5]}, Length: {len(emb)}")

        query_text = "What is a RAG system?"
        query_embedding = embedding_service.encode_query(query_text)
        logger.info(f"Embedding for query (first 5 dims): {query_embedding[:5]}, Length: {len(query_embedding)}")

        # Test empty inputs
        empty_text_embeddings = embedding_service.encode_texts([])
        logger.info(f"Embeddings for empty text list: {empty_text_embeddings}")

        empty_query_embedding = embedding_service.encode_query("")
        logger.info(f"Embedding for empty query: {empty_query_embedding}")


    except EmbeddingError as e:
        logger.error(f"Embedding service error: {e}")
    except Exception as e:
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)
